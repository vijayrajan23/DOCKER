#create docker container
docker create --name containername image_name(ubuntu)
docker run --name containername -it(input terminal) image_name

#start container
docker start containername 

#Attache working docker container
docker exec -it containername
docker attache containername

#Download Docker Images
docker pull image
docker login
docker logout
docker pull image_name
docker push containerID

#View Running Docker Containre
docker	ps (Process Status)
(curent working or runing container)
docker ps -a (running and stop container)

#Check last create 2 container
docker ps -n=2 (latest runing or notruning 2 container)

#Docker container ID
docker ps -aq 

# Docker filter namebased search
docker ps -a --filter="name=containername"  container namebased searching

# Docker Filter Container ID Based
docker ps -a --filter="id=containerid"  container id based search

#Docker Status based filter
docker ps -a --filter status=running    status(running paused stop ) based container search

#Docker Filter ISO or image based
docker ps -a --filter ancestor=imagename or ancestor=image:tak(or version)   images base search



#docker network
#how to create userdefine bridge
docker network create --driver=bridge new_network_name
docker network create new_network_name

#list docker network
docker network ls

#How to connect a runnig container existing user_define bridge network
sudo docker network connect network_name container_name
sudo docker network connect nila con1
#How to disconnect container from a user_define bridge network 
docker network disconnect network_name container_name

#Enable forwarding from Docker container to the outside world
sysctl net.ipv4.conf.all.forwarding=1
iptables -P FORWARD ACCEPT

#how find docker container ip vai docker hub
docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' containername

#How to create new image from a containers changes

#stop container

docker commit containerID  new_image_name
docker commit containername new_image_name


# When Docker Host restart contain automatic start
 docker run -itd --restart unless-stopped [container]
 docker run -itd --restart unless-stopped centos


#Docker Storage
#Craet Storage
docker volume create volume_name
docker volume create my_volume

#list Out docker volume 
docker volume ls

#ADD Volume new container
# --mount option
docker run -d --mount source=volume_name,traget=mount_directory
docker run -d --name voltest --mount source=my_volume,traget=/app nginx

# search voluem name type 
sudo docker inspect -f '{{range.Mounts}} {{"Type: "}}{{.Type}}  {{"NAME: "}}{{.Name}}  {{"DESTINATION: "}}{{.Destination}}{{end}}' volte
>>> Type: volume  NAME: my_volume  DESTINATION: /app

# --mount readonly and readwrite permission
docker run -d --mount source=volume_name,traget=mount_directory,permission(readonly) 
docker run -d --name vtest --mount source=my_vol,traget=/usr/share/html:readonly  nginx

# find docker voluem name type trage mode permission
docker inspect -f '{{range.Mounts}} {{"Type: "}}{{.Type}}  {{"NAME: "}}{{.Name}}  {{"DESTINATION: "}}{{.Destination}} {{"Mode: "}}{{.Mode}}{{end}}' vtag
>>>Type: volume  NAME: my_vol  DESTINATION: /usr/share/html Mode: ro

# -v flag
docker run -d -v docker_volume:mount_directory
docker run -d --name vtest1 -v my_volume:/app nginx

# -v flage --permission
docker run -d -v docker_volume:mount_directory:permission
docker run -d --name vtest2 -v my_vol1:/usr/share/html:ro nginx

# Remove Docker volume
# list docker volume 
docker volume ls
>>>DRIVER              VOLUME NAME
>>>local               my_vol2
>>>local               my_volume

#Stop volume used container and remove this container after remove volume
docker stop containet_name
docker stop vtag
#conatine user volume find 
docker inspect -f '{{range.Mounts}} {{"volumeName : "}}{{.Name}} {{"MountDirectory : "}}{{.Destination}} {{"filePermission : "}}{{.Mode}}{{end}}' vtag
>>> volumeName : my_vol2 MountDirectory : /usr/share/html filePermission : ro

docker rm container_name
docker rm vtag

docker volume rm volume_name
docker volume rm my_vol2
docker volume ls
>>>DRIVER              VOLUME NAME
>>>local               my_volume


                                   USE VOLUME DRIVER

#Initial set-up
#On the Docker host, install the vieux/sshfs plugin:

docker plugin install --grant-all-permissions vieux/sshfs

#Create a volume using a volume driver
-o flag is omit option

docker volume create --driver vieux/sshfs -o sshcmd=user_name@hosts:/path -o password=user_password volume_name
docker volume create --driver vieux/sshfs -o sshcmd=ubuntu@192.168.5.146:/home/ubuntu/sshfs_volume -o password=password docker_vol
>>>$ sudo docker volume create --driver vieux/sshfs -o sshcmd=ubuntu@192.168.5.146:/home/ubuntu/sshfs_volume -o password=. docker_vol
     docker_vol
>>>$ sudo docker volume ls
     DRIVER               VOLUME NAME
     vieux/sshfs:latest   docker_vol
     local                my_volume
     vieux/sshfs:latest   sshvolume


#RUN container with volume driver
docker run -d --name vol_driver_test --volume-driver vieux/sshfs --mount src=docker_vol,target=/server,volume-opt=sshcmd=ubuntu@192.168.5.146:/home/ubuntu/sshfs_volume,volume-opt=password=user_password container_image
sudo docker run -d --name vol_driver_test --volume-driver vieux/sshfs --mount src=docker_vol,target=/server,volume-opt=sshcmd=ubuntu@192.168.5.146:/home/ubuntu/sshfs_volume,volume-opt=password=password nginx
>>> sudo docker inspect -f '{{range.Mounts}}{{.Name}}{{.Destination}}{{end}}' vol_driver_test
    docker_vol  /server
